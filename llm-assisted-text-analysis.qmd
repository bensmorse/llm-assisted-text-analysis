---
title: "LLM-Assisted Analysis of Open-Ended Text"
subtitle: "Consumer Car Reviews from Edmunds.com"
format: html
editor: source
---

<!--
to set this up, we draw on a combination of:
https://quarto.org/docs/publishing/github-pages.html
https://quarto.org/docs/projects/quarto-projects.html
https://www.youtube.com/watch?v=wZ9pZOFSCko&ab_channel=JoshuaFrench
-->

<!-- chunk options
#| fig-cap: "Air Quality"

eval	Evaluate the code chunk (if false, just echos the code into the output).
echo	Include the source code in output
output	Include the results of executing the code in the output (true, false, or asis to indicate that the output is raw markdown and should not have any of Quartoâ€™s standard enclosing markdown).
warning	Include warnings in the output.
error	Include errors in the output (note that this implies that errors executing code will not halt processing of the document).
include	Catch all for preventing any output (code or results) from being included (e.g. include: false suppresses all output from the code block).

-->

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

text analysis has long been a complicated and not always super insightful exercise. not anymore. now it's vastly more powerful, insightful, and accessible. 

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed). Does this work?


Does this work?

```{r setup}
#| include: false 

library(tidyverse)
library(haven)
library(readr)
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(readxl)
library(hrbrthemes)


```


```{r insheet}

# American car brands: ford, stellantis (chrysler, dodge, jeep, and ram), GM (Buick, Cadillac, Chevrolet, and GMC)
# Japanese car brands: toyota, honda, mazda, nissan, mitsubishi, suzuki, subaru, infiniti, lexus, acura
# European car brands: bmw, mercedes benz, volkswagen, audi, volvo, 
# south korean car brands: kia, hyundai


# Define the path to the subfolder containing the .csv files
subfolder_path <- "data"

# List all .csv files in the subfolder
csv_files <- list.files(path = subfolder_path, pattern = "\\.csv$", full.names = TRUE)


# Initialize an empty list to store the data frames
data_list <- list()

# Use lapply to read all .csv files and store them in a list
# data_list <- lapply(csv_files, read_csv)

# Loop through each file and read it into a data frame
for (file in csv_files) {
  
  # extract the make from filename
  # Using gsub to cut "Scraped_Car_Review_" and ".csv"
  result <- gsub("data/Scrapped_Car_Reviews_", "", file)  
  result <- gsub("data/Scrapped_Car_Review_", "", result)  
  result <- gsub("data/Scraped_Car_Review_", "", result)  
  result <- gsub("data/Scraped_Car_Review_", "", result)  
  result <- gsub(".csv", "", result)  

  # Read the .csv file & add variable for make
  data <- read_csv(file, show_col_types = FALSE) |> mutate(make = result)
  
  # Store the data frame in the list
  data_list[[file]] <- data
}

df <-bind_rows(data_list)
glimpse(df)


# remove leading words & spaces from date variable

df <- df |>
  mutate(Review_Date = str_replace_all(Review_Date, "on ", ""),
         Review_Date = str_replace_all(Review_Date, "PDT", ""),
         Review_Date = str_replace_all(Review_Date, " PST", ""),
         Review_Date = str_replace_all(Review_Date, "[()]", ""),
         Review_Date = str_trim(Review_Date),
         Review_Date = mdy_hm(Review_Date))

glimpse(df)

# add variable for country

df <- df %>%
  mutate(country = case_when(
    make %in% c("toyota", "honda", "mazda","nissan","mitsubishi","suzuki","subaru","infiniti","lexus","acura") ~ "Japanese",
    make %in% c("ford", "chrysler", "dodge", "jeep", "ram", "buick", "cadillac", "chevrolet", "gmc", "lincoln", "mercury") ~ "American",
    make %in% c("bmw", "mercedes-benz","volkswagen","audi", "volvo", "porsche", "mini") ~ "European",
    make %in% c("kia", "hyundai") ~ "South Korean",
    TRUE ~ make  # Default value for any unmatched cases
  ))
table(df$country)



df.bymonth <- df |>
  mutate(reviews.month = round_date(Review_Date, "month")) |> # reviews by month-year
  #mutate(reviews.month = round_date(Review_Date, "3 months")) |> # reviews by month-year
  #filter(Review_Date >= as.POSIXct("2014-01-01")) |>
  group_by(country, reviews.month) |>
  summarise(
    mean.rating = mean(Rating, na.rm=TRUE),
    num.reviews = n()
  )

glimpse(df.bymonth)


p <- ggplot(df.bymonth, aes(x=reviews.month, y=mean.rating, group=country, color=country)) +
  #geom_line
  geom_smooth()

p


df |> 
  slice_sample(n = 1000) |>
  filter(Rating < 2) |>
  select(make, Review_Title, Review) |>
  View()



# positive
# negative
# neutral


# among those with negative review 
# reliability
# 

# among those with positive review
# engine power / performance
# build quality
# smooth handling
# reliability and durability
# technology and/or connectivity
# gas mileage / fuel efficiency
# safety
# cargo space
# driver assistance
# comfort features / car noise / ride quality

# niche issues
# electrical problems
# transmission problems

# other
# resale value
# brand loyalty?

#edmunds categories: utility driving comfort interior technology

```




## Descriptives

```{r}

df$GPT_Rating <- df$Rating + rnorm(length(df$Rating),0,1)

# linear trend + confidence interval
p3 <- ggplot(df, aes(x=Rating, y=GPT_Rating)) +
  geom_point() +
  geom_smooth(method=lm , color="red", fill="#69b3a2", se=TRUE) +
  theme_ipsum()

p3

# confusion matrix approach

# Define the bin breaks and labels
bin_breaks <- c(-Inf, 2.5, 3.5, 5)
bin_labels <- c("Negative", "Neutral", "Positive")

# Use cut() to bin the age variable
df <- df %>%
  mutate(Rating_cat = cut(Rating, breaks = bin_breaks, labels = bin_labels, include.lowest = TRUE))



df |> 
  slice_sample(n = 1000) |>
  select(Rating, Rating_cat) |>
  View()




```





## Disaggregation

results by American, European, Japanesse, and South Korean automakers





































