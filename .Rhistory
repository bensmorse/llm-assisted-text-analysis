#| include: false
library(tidyverse)
library(haven)
library(readr)
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(readxl)
library(hrbrthemes)
subfolder_path <- "data"
# List all .csv files in the subfolder
csv_files <- list.files(path = subfolder_path, pattern = "\\.csv$", full.names = TRUE)
csv_files
# Use lapply to read all .csv files and store them in a list
data_list <- lapply(csv_files, read_csv)
df <-bind_rows(data_list)
glimpse(df)
# Loop through each file and read it into a data frame
for (file in csv_files) {
# Read the .csv file
data <- read_csv(file) |> mutate (brand = "ford")
# Store the data frame in the list
data_list[[file]] <- data
}
df <-bind_rows(data_list)
glimpse(df)
csv_files <- list.files(path = subfolder_path, pattern = "\\.csv$", full.names = TRUE)
# Initialize an empty list to store the data frames
data_list <- list()
# Loop through each file and read it into a data frame
for (file in csv_files) {
# Read the .csv file
data <- read_csv(file, show_col_types = FALSE) |> mutate(make = "ford")
# Store the data frame in the list
data_list[[file]] <- data
}
df <-bind_rows(data_list)
glimpse(df)
# Initialize an empty list to store the data frames
data_list <- list()
# Loop through each file and read it into a data frame
for (file in csv_files) {
#extract the make from filename
# Use gsub to remove "Scrapped_Car_Reviews_"
result <- gsub("Scrapped_Car_Reviews_", "", file)
# Read the .csv file
data <- read_csv(file, show_col_types = FALSE) |> mutate(make = result)
# Store the data frame in the list
data_list[[file]] <- data
}
df <-bind_rows(data_list)
glimpse(df)
file
gsub("Scrapped_Car_Reviews_", "", file)
# Initialize an empty list to store the data frames
data_list <- list()
# Loop through each file and read it into a data frame
for (file in csv_files) {
#extract the make from filename
# Use gsub to remove "Scrapped_Car_Reviews_"
result <- gsub("data/Scrapped_Car_Reviews_", "", file)
# Read the .csv file
data <- read_csv(file, show_col_types = FALSE) |> mutate(make = paste(result))
# Store the data frame in the list
data_list[[file]] <- data
}
df <-bind_rows(data_list)
glimpse(df)
# Initialize an empty list to store the data frames
data_list <- list()
# Loop through each file and read it into a data frame
for (file in csv_files) {
# extract the make from filename
# Use gsub to remove "Scrapped_Car_Reviews_"
result <- gsub("data/Scrapped_Car_Review_", "", file)
# Read the .csv file
data <- read_csv(file, show_col_types = FALSE) |> mutate(make = paste(result))
# Store the data frame in the list
data_list[[file]] <- data
}
df <-bind_rows(data_list)
glimpse(df)
# Initialize an empty list to store the data frames
data_list <- list()
# Loop through each file and read it into a data frame
for (file in csv_files) {
# extract the make from filename
# Use gsub to remove "Scrapped_Car_Reviews_"
result <- gsub("data/Scraped_Car_Review_", "", file)
# Read the .csv file
data <- read_csv(file, show_col_types = FALSE) |> mutate(make = paste(result))
# Store the data frame in the list
data_list[[file]] <- data
}
df <-bind_rows(data_list)
glimpse(df)
# Initialize an empty list to store the data frames
data_list <- list()
# Loop through each file and read it into a data frame
for (file in csv_files) {
# extract the make from filename
# Use gsub to remove "Scrapped_Car_Reviews_"
result <- gsub("data/Scraped_Car_Review_*.csv", "", file)
# Read the .csv file
data <- read_csv(file, show_col_types = FALSE) |> mutate(make = paste(result))
# Store the data frame in the list
data_list[[file]] <- data
}
df <-bind_rows(data_list)
glimpse(df)
# Initialize an empty list to store the data frames
data_list <- list()
# Loop through each file and read it into a data frame
for (file in csv_files) {
# extract the make from filename
# Use gsub to remove "Scrapped_Car_Reviews_"
result <- gsub("data/Scraped_Car_Review_", "", file)
result <- gsub(".csv", "", result)
# Read the .csv file
data <- read_csv(file, show_col_types = FALSE) |> mutate(make = paste(result))
# Store the data frame in the list
data_list[[file]] <- data
}
df <-bind_rows(data_list)
glimpse(df)
# Initialize an empty list to store the data frames
data_list <- list()
# Loop through each file and read it into a data frame
for (file in csv_files) {
# extract the make from filename
# Use gsub to remove "Scrapped_Car_Reviews_"
result <- gsub("data/Scraped_Car_Review_", "", file)
result <- gsub(".csv", "", result)
# Read the .csv file
data <- read_csv(file, show_col_types = FALSE) |> mutate(make = result)
# Store the data frame in the list
data_list[[file]] <- data
}
df <-bind_rows(data_list)
glimpse(df)
df <- df %>%
mutate(Review_Date = str_replace_all(Review_Date, "on ", ""),
Review_Date = str_replace_all(Review_Date, "PDT", ""),
Review_Date = str_replace_all(Review_Date, " PST", ""),
Review_Date = str_replace_all(Review_Date, "[()]", ""),
Review_Date = str_trim(Review_Date),
Review_Date = mdy_hm(Review_Date))
glimpse(df)
df <- df %>%
mutate(country = case_when(
make %in% c("toyota", "honda", "mazda","nissan","mitsubishi","suzuki","subaru","infiniti","lexus","acura") ~ "Japanese",
make %in% c("ford", "chrysler", "dodge", "jeep", "ram", "buick", "cadillac", "chevrolet", "gmc") ~ "American",
make %in% c("bmw", "mercedes-benz","volkswagen","audi", "volvo") ~ "European",
make %in% c("kia", "hyundai") ~ "South Korean",
TRUE ~ "Other"  # Default value for any unmatched cases
))
table(df$country)
df <- df %>%
mutate(country = case_when(
make %in% c("toyota", "honda", "mazda","nissan","mitsubishi","suzuki","subaru","infiniti","lexus","acura") ~ "Japanese",
make %in% c("ford", "chrysler", "dodge", "jeep", "ram", "buick", "cadillac", "chevrolet", "gmc") ~ "American",
make %in% c("bmw", "mercedes-benz","volkswagen","audi", "volvo") ~ "European",
make %in% c("kia", "hyundai") ~ "South Korean",
TRUE ~ .default  # Default value for any unmatched cases
))
df <- df %>%
mutate(country = case_when(
make %in% c("toyota", "honda", "mazda","nissan","mitsubishi","suzuki","subaru","infiniti","lexus","acura") ~ "Japanese",
make %in% c("ford", "chrysler", "dodge", "jeep", "ram", "buick", "cadillac", "chevrolet", "gmc") ~ "American",
make %in% c("bmw", "mercedes-benz","volkswagen","audi", "volvo") ~ "European",
make %in% c("kia", "hyundai") ~ "South Korean",
TRUE ~ make  # Default value for any unmatched cases
))
table(df$country)
data_list <- list()
# Use lapply to read all .csv files and store them in a list
# data_list <- lapply(csv_files, read_csv)
# Loop through each file and read it into a data frame
for (file in csv_files) {
# extract the make from filename
# Using gsub to cut "Scraped_Car_Review_" and ".csv"
result <- gsub("data/Scrapped_Car_Reviews_", "", file)
result <- gsub("data/Scrapped_Car_Review_", "", result)
result <- gsub("data/Scraped_Car_Review_", "", result)
result <- gsub("data/Scraped_Car_Review_", "", result)
result <- gsub(".csv", "", result)
# Read the .csv file & add variable for make
data <- read_csv(file, show_col_types = FALSE) |> mutate(make = result)
# Store the data frame in the list
data_list[[file]] <- data
}
df <-bind_rows(data_list)
glimpse(df)
table(df$make)
df <- df |>
mutate(Review_Date = str_replace_all(Review_Date, "on ", ""),
Review_Date = str_replace_all(Review_Date, "PDT", ""),
Review_Date = str_replace_all(Review_Date, " PST", ""),
Review_Date = str_replace_all(Review_Date, "[()]", ""),
Review_Date = str_trim(Review_Date),
Review_Date = mdy_hm(Review_Date))
glimpse(df)
# add variable for country
df <- df %>%
mutate(country = case_when(
make %in% c("toyota", "honda", "mazda","nissan","mitsubishi","suzuki","subaru","infiniti","lexus","acura") ~ "Japanese",
make %in% c("ford", "chrysler", "dodge", "jeep", "ram", "buick", "cadillac", "chevrolet", "gmc") ~ "American",
make %in% c("bmw", "mercedes-benz","volkswagen","audi", "volvo") ~ "European",
make %in% c("kia", "hyundai") ~ "South Korean",
TRUE ~ make  # Default value for any unmatched cases
))
table(df$country)
df <- df %>%
mutate(country = case_when(
make %in% c("toyota", "honda", "mazda","nissan","mitsubishi","suzuki","subaru","infiniti","lexus","acura") ~ "Japanese",
make %in% c("ford", "chrysler", "dodge", "jeep", "ram", "buick", "cadillac", "chevrolet", "gmc", "lincoln", "mercury") ~ "American",
make %in% c("bmw", "mercedes-benz","volkswagen","audi", "volvo", "porsche", "mini") ~ "European",
make %in% c("kia", "hyundai") ~ "South Korean",
TRUE ~ make  # Default value for any unmatched cases
))
table(df$country)
df.bymonth <- df |>
#mutate(reviews.month = round_date(Review_Date, "month")) |> # reviews by month-year
mutate(reviews.month = round_date(Review_Date, "3 months")) |> # reviews by month-year
#filter(Review_Date >= as.POSIXct("2014-01-01")) |>
group_by(country, reviews.month) |>
summarise(
mean.rating = mean(Rating, na.rm=TRUE),
num.reviews = n()
)
glimpse(df.bymonth)
p <- ggplot(df.bymonth, aes(x=reviews.month, y=mean.rating, group=make, color=make)) +
geom_line()
p
p <- ggplot(df.bymonth, aes(x=reviews.month, y=mean.rating, group=country, color=country)) +
geom_line()
p
p <- ggplot(df.bymonth, aes(x=reviews.month, y=mean.rating, group=country, color=country)) +
geom_smooth()
p
df.bymonth <- df |>
mutate(reviews.month = round_date(Review_Date, "month")) |> # reviews by month-year
#mutate(reviews.month = round_date(Review_Date, "3 months")) |> # reviews by month-year
#filter(Review_Date >= as.POSIXct("2014-01-01")) |>
group_by(country, reviews.month) |>
summarise(
mean.rating = mean(Rating, na.rm=TRUE),
num.reviews = n()
)
glimpse(df.bymonth)
p <- ggplot(df.bymonth, aes(x=reviews.month, y=mean.rating, group=country, color=country)) +
#geom_line
geom_smooth()
p
df$GPT_Rating <- df$Rating + rnorm(length(df$Rating),0,1)
# linear trend + confidence interval
p3 <- ggplot(df, aes(x=Rating, y=GPT_Rating)) +
geom_point() +
geom_smooth(method=lm , color="red", fill="#69b3a2", se=TRUE) +
theme_ipsum()
p3
# Define the bin breaks and labels
bin_breaks <- c(-Inf, 2.5, 3.5, 5)
bin_labels <- c("Negative", "Neutral", "Positive")
# Use cut() to bin the Rating variable
df <- df %>%
mutate(Rating_cat = cut(Rating, breaks = bin_breaks, labels = bin_labels, include.lowest = TRUE))
df |>
slice_sample(n = 1000) |>
select(Rating, Rating_cat) |>
View()
#| warning: false
df$GPT_Rating <- df$Rating + rnorm(length(df$Rating),0,1)
# linear trend + confidence interval
p3 <- ggplot(df, aes(x=Rating, y=GPT_Rating)) +
geom_point() +
geom_smooth(method=lm , color="red", fill="#69b3a2", se=TRUE) +
theme_ipsum()
p3
# confusion matrix approach
# Define the bin breaks and labels
bin_breaks <- c(-Inf, 2.5, 3.5, 5)
bin_labels <- c("Negative", "Neutral", "Positive")
# Use cut() to bin the Rating variable
df <- df %>%
mutate(Rating_cat = cut(Rating, breaks = bin_breaks, labels = bin_labels, include.lowest = TRUE))
df |>
slice_sample(n = 1000) |>
select(Rating, Rating_cat) |>
View()
# Load necessary library
library(caret)
# Example data: Actual and predicted classes
actual <- factor(c("Class1", "Class2", "Class3", "Class1", "Class2", "Class3", "Class1", "Class2", "Class3"))
predicted <- factor(c("Class1", "Class2", "Class3", "Class1", "Class2", "Class2", "Class3", "Class3", "Class1"))
# Ensure both actual and predicted have the same levels (classes)
levels(actual) <- levels(predicted) <- c("Class1", "Class2", "Class3")
# Generate the confusion matrix
conf_matrix <- confusionMatrix(predicted, actual)
# Print the confusion matrix
print(conf_matrix)
# Load necessary library
library(ggplot2)
# Convert confusion matrix to a data frame
conf_matrix_df <- as.data.frame(conf_matrix$table)
# Plot the confusion matrix
ggplot(conf_matrix_df, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile() +
geom_text(aes(label = Freq), color = "white") +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(title = "Confusion Matrix",
x = "Actual",
y = "Predicted") +
theme_minimal()
names(df)
#| echo = FALSE
data |>
slice(n=10)
#| echo = FALSE
data |>
slice(10)
select(make, Review_Title, Review)
#| echo = FALSE
data |>
slice(10) |>
select(make, Review_Title, Review)
#| echo = FALSE
data |>
slice(10) |>
select(make, Review_Title, Review) |>
print()
#| echo = FALSE
data |>
slice(n=10) |>
select(make, Review_Title, Review) |>
print()
#| echo = FALSE
data |>
slice(n = 10) |>
select(make, Review_Title, Review) |>
print()
#| echo = FALSE
data |>
select(make, Review_Title, Review) |>
slice(n = 10) |>
print()
#| echo = FALSE
data |>
slice_sample(n = 10) |>
select(make, Review_Title, Review) |>
print()
#| echo = FALSE
data |>
sample_n(10) |>
select(make, Review_Title, Review) |>
print()
#| echo = FALSE
df |>
sample_n(10) |>
select(make, Review_Title, Review) |>
print()
#| echo = FALSE
df |>
slice_sample(n = 10) |>
select(make, Review_Title, Review) |>
print()
#| echo = FALSE
df |>
slice_sample(n = 10) |>
select(make, Review) |>
print()
#| echo = FALSE
df |>
slice_sample(n = 10) |>
select(make, Review_Title, Review)
install.packages("ellmer")
library(ellmer)
chat <- chat_openai(
model = "gpt-4o-mini",
system_prompt = "You are a friendly but terse assistant.",
)
chat <- chat_deepseek(
model = "gpt-4o-mini",
system_prompt = "You are a friendly but terse assistant.",
)
usethis::edit_r_environ()
usethis::edit_r_environ()
