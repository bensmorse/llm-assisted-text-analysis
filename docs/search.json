[
  {
    "objectID": "llm-assisted-text-analysis.html",
    "href": "llm-assisted-text-analysis.html",
    "title": "LLM-Assisted Analysis of Open-Ended Text",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.\ntext analysis has long been a complicated and not always super insightful exercise. not anymore. now it’s vastly more powerful, insightful, and accessible."
  },
  {
    "objectID": "llm-assisted-text-analysis.html#quarto",
    "href": "llm-assisted-text-analysis.html#quarto",
    "title": "LLM-Assisted Analysis of Open-Ended Text",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.\ntext analysis has long been a complicated and not always super insightful exercise. not anymore. now it’s vastly more powerful, insightful, and accessible."
  },
  {
    "objectID": "llm-assisted-text-analysis.html#running-code",
    "href": "llm-assisted-text-analysis.html#running-code",
    "title": "LLM-Assisted Analysis of Open-Ended Text",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed). Does this work?\nDoes this work?\n\n# American car brands: ford, stellantis (chrysler, dodge, jeep, and ram), GM (Buick, Cadillac, Chevrolet, and GMC)\n# Japanese car brands: toyota, honda, mazda, nissan, mitsubishi, suzuki, subaru, infiniti, lexus, acura\n# European car brands: bmw, mercedes benz, volkswagen, audi, volvo, \n# south korean car brands: kia, hyundai\n\n\n# Define the path to the subfolder containing the .csv files\nsubfolder_path &lt;- \"data\"\n\n# List all .csv files in the subfolder\ncsv_files &lt;- list.files(path = subfolder_path, pattern = \"\\\\.csv$\", full.names = TRUE)\n\n\n# Initialize an empty list to store the data frames\ndata_list &lt;- list()\n\n# Use lapply to read all .csv files and store them in a list\n# data_list &lt;- lapply(csv_files, read_csv)\n\n# Loop through each file and read it into a data frame\nfor (file in csv_files) {\n  \n  # extract the make from filename\n  # Using gsub to cut \"Scraped_Car_Review_\" and \".csv\"\n  result &lt;- gsub(\"data/Scrapped_Car_Reviews_\", \"\", file)  \n  result &lt;- gsub(\"data/Scrapped_Car_Review_\", \"\", result)  \n  result &lt;- gsub(\"data/Scraped_Car_Review_\", \"\", result)  \n  result &lt;- gsub(\"data/Scraped_Car_Review_\", \"\", result)  \n  result &lt;- gsub(\".csv\", \"\", result)  \n\n  # Read the .csv file & add variable for make\n  data &lt;- read_csv(file, show_col_types = FALSE) |&gt; mutate(make = result)\n  \n  # Store the data frame in the list\n  data_list[[file]] &lt;- data\n}\n\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\n• `` -&gt; `...1`\n\ndf &lt;-bind_rows(data_list)\nglimpse(df)\n\nRows: 206,181\nColumns: 8\n$ ...1          &lt;dbl&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16…\n$ Review_Date   &lt;chr&gt; \"on 10/13/05 15:30 PM (PDT)\", \"on 07/17/05 21:59 PM (PDT…\n$ Author_Name   &lt;chr&gt; \"roadking\", \"Mark\", \"Tom Sheer\", \"Keven Smith\", \"VanMan\"…\n$ Vehicle_Title &lt;chr&gt; \"2002 Dodge Ram Cargo Van 1500 3dr Van (3.9L 6cyl 3A)\", …\n$ Review_Title  &lt;chr&gt; \"Great delivery vehicle\", \"Disappointmnet\", \"Sweet van\",…\n$ Review        &lt;chr&gt; \"It's been a great delivery vehicle for my cafe business…\n$ Rating        &lt;dbl&gt; 4.625, 2.125, 5.000, 4.500, 2.875, 2.250, 3.000, 4.625, …\n$ make          &lt;chr&gt; \"dodge\", \"dodge\", \"dodge\", \"dodge\", \"dodge\", \"dodge\", \"d…\n\n# remove leading words & spaces from date variable\n\ndf &lt;- df |&gt;\n  mutate(Review_Date = str_replace_all(Review_Date, \"on \", \"\"),\n         Review_Date = str_replace_all(Review_Date, \"PDT\", \"\"),\n         Review_Date = str_replace_all(Review_Date, \" PST\", \"\"),\n         Review_Date = str_replace_all(Review_Date, \"[()]\", \"\"),\n         Review_Date = str_trim(Review_Date),\n         Review_Date = mdy_hm(Review_Date))\n\nglimpse(df)\n\nRows: 206,181\nColumns: 8\n$ ...1          &lt;dbl&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16…\n$ Review_Date   &lt;dttm&gt; 2005-10-13 15:30:00, 2005-07-17 21:59:00, 2002-07-16 00…\n$ Author_Name   &lt;chr&gt; \"roadking\", \"Mark\", \"Tom Sheer\", \"Keven Smith\", \"VanMan\"…\n$ Vehicle_Title &lt;chr&gt; \"2002 Dodge Ram Cargo Van 1500 3dr Van (3.9L 6cyl 3A)\", …\n$ Review_Title  &lt;chr&gt; \"Great delivery vehicle\", \"Disappointmnet\", \"Sweet van\",…\n$ Review        &lt;chr&gt; \"It's been a great delivery vehicle for my cafe business…\n$ Rating        &lt;dbl&gt; 4.625, 2.125, 5.000, 4.500, 2.875, 2.250, 3.000, 4.625, …\n$ make          &lt;chr&gt; \"dodge\", \"dodge\", \"dodge\", \"dodge\", \"dodge\", \"dodge\", \"d…\n\n# add variable for country\n\ndf &lt;- df %&gt;%\n  mutate(country = case_when(\n    make %in% c(\"toyota\", \"honda\", \"mazda\",\"nissan\",\"mitsubishi\",\"suzuki\",\"subaru\",\"infiniti\",\"lexus\",\"acura\") ~ \"Japanese\",\n    make %in% c(\"ford\", \"chrysler\", \"dodge\", \"jeep\", \"ram\", \"buick\", \"cadillac\", \"chevrolet\", \"gmc\", \"lincoln\", \"mercury\") ~ \"American\",\n    make %in% c(\"bmw\", \"mercedes-benz\",\"volkswagen\",\"audi\", \"volvo\", \"porsche\", \"mini\") ~ \"European\",\n    make %in% c(\"kia\", \"hyundai\") ~ \"South Korean\",\n    TRUE ~ make  # Default value for any unmatched cases\n  )) |&gt; \n  rename(index = \"...1\")\n\ntable(df$country)\n\n\n    American     European     Japanese South Korean \n       78708        38535        74724        14214 \n\ndf.bymonth &lt;- df |&gt;\n  mutate(reviews.month = round_date(Review_Date, \"month\")) |&gt; # reviews by month-year\n  #mutate(reviews.month = round_date(Review_Date, \"3 months\")) |&gt; # reviews by month-year\n  #filter(Review_Date &gt;= as.POSIXct(\"2014-01-01\")) |&gt;\n  group_by(country, reviews.month) |&gt;\n  summarise(\n    mean.rating = mean(Rating, na.rm=TRUE),\n    num.reviews = n()\n  )\n\n`summarise()` has grouped output by 'country'. You can override using the\n`.groups` argument.\n\nglimpse(df.bymonth)\n\nRows: 802\nColumns: 4\nGroups: country [4]\n$ country       &lt;chr&gt; \"American\", \"American\", \"American\", \"American\", \"America…\n$ reviews.month &lt;dttm&gt; 2002-02-01, 2002-03-01, 2002-04-01, 2002-05-01, 2002-06…\n$ mean.rating   &lt;dbl&gt; 3.902778, 4.278049, 4.340334, 4.282366, 4.303444, 4.2485…\n$ num.reviews   &lt;int&gt; 9, 410, 494, 448, 421, 434, 439, 394, 404, 383, 413, 493…\n\np &lt;- ggplot(df.bymonth, aes(x=reviews.month, y=mean.rating, group=country, color=country)) +\n  #geom_line\n  geom_smooth()\n\np\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'"
  },
  {
    "objectID": "llm-assisted-text-analysis.html#llm-assisted-coding",
    "href": "llm-assisted-text-analysis.html#llm-assisted-coding",
    "title": "LLM-Assisted Analysis of Open-Ended Text",
    "section": "LLM-Assisted Coding",
    "text": "LLM-Assisted Coding\nView the data:\n\n\n# A tibble: 10 × 3\n   make          Review_Title                                   Review          \n   &lt;chr&gt;         &lt;chr&gt;                                          &lt;chr&gt;           \n 1 chevrolet     Cheap reliable transportation                  \"I bought this …\n 2 cadillac      My STS rocks!                                  \"I've enjoyed o…\n 3 cadillac      Love my Caddy !                                \"This is my fou…\n 4 nissan        Disappointed                                   \"I changed my 2…\n 5 toyota        The Haggle Was Worth the Car                   \"Looked really …\n 6 mercedes-benz Mercedes C43 Jet                               \"Love my C43! Y…\n 7 acura         OVERALL PERFORMANCE                            \"OVERALL PERFOR…\n 8 mazda         Love performance, hate the new exterior design \"I currently ow…\n 9 chrysler      Loved this car, but hated turning radius       \"I was just in …\n10 chevrolet     JUNK                                           \"04 impala LS/3…\n\n\nCode the data:\n\n\nlibrary(ellmer)\n\nchat &lt;- chat_openai(\n  model = \"gpt-4o-mini\",\n  system_prompt = \"You are a friendly but terse assistant.\",\n)\n\n# confirm chat is connected to API\nchat$chat(\"Is R a functional programming language?\")\n\nYes, R is a functional programming language. It supports first-class functions,\nhigher-order functions, and allows functions to be passed as arguments. While \nit also supports other programming paradigms, such as procedural and \nobject-oriented programming, its functional features are a key aspect of the \nlanguage.\n\nprompt&lt;-paste(\"Please car review the an owner submitted to Edmunds.com, a popular website for reviewing cars. Review the response carefully and code the following variables:\")\n\nresponse_coded &lt;- type_object(\n  prompt,\n  sentiment = type_enum(\"Extract the sentiment of the review\", c(\"positive\", \"neutral\", \"negative\")),\n  gpt_Rating = type_number(\"Based on this review, how do you think the owner would rate their vehicle? Use a numeric scale from 0 to 5, where 0 is very negative, and 5 is very positive.\"),\n  reliability = type_integer(\"1 if the owner references the vehicle's reliability in their review, 0 otherwise\"),\n  utility = type_integer(\"1 if the owner references the vehicle's utility features in their review, 0 otherwise\"),\n  driving = type_integer(\"1 if the owner references the vehicle's driving characteristics in their review, 0 otherwise\"),\n  comfort = type_integer(\"1 if the owner references the vehicle's comfort in their review, 0 otherwise\"),\n  interior = type_integer(\"1 if the owner references the vehicle's interior features in their review, 0 otherwise\"),\n  fuel_efficiency= type_integer(\"1 if the owner references the vehicle's fuel efficiency in their review, 0 otherwise\"),\n  technology = type_integer(\"1 if the owner references the vehicle's technology features in their review, 0 otherwise\")\n)\n\n\n# DEMO STRUCTURED DATA FUNCTION\n\ntext&lt;-paste(df[165,\"Review\"])\n\ntext\n\n[1] \"I traded my 05 Bonneville for the  05 Magnum SXT RWD 3.5L. I am 19 and this is the perfect car- it's definitely a sporty college kid car, and I got mine with under 20k miles for under $10k. What a steal! Gas mileage is not bad. I get 21mpg driving around town but I do a lot of interstate driving and i maintain 25-27mpg. Not better than my Bonneville no, but it certainly gets just as good gas mileage as any other car on the road today. I only wish I had a Magnum R/T. I want the dual chrome exhaust with the Hemi!\"\n\nchat &lt;- chat_openai()\ncoded.review &lt;- chat$extract_data(text, type = response_coded)\nstr(coded.review)\n\nList of 9\n $ sentiment      : chr \"positive\"\n $ gpt_Rating     : num 4.5\n $ reliability    : int 0\n $ utility        : int 0\n $ driving        : int 1\n $ comfort        : int 0\n $ interior       : int 0\n $ fuel_efficiency: int 1\n $ technology     : int 0\n\n# code a subset of responses\n\n\ndf.sub &lt;- df |&gt;\n  slice_sample(n = 10)\n\n\nresult = NULL\n\nfor (i in 1:nrow(df.sub)) {\n  \n  out &lt;- chat$extract_data(paste(df.sub[i,\"Review\"]), \n                          type = response_coded)\n  \n  result&lt;-rbind(result,cbind(df.sub[i,\"index\"],as.data.frame(out)))\n\n}\n\nglimpse(result) \n\nRows: 10\nColumns: 10\n$ index           &lt;dbl&gt; 3091, 3220, 6, 1087, 12331, 970, 17804, 15, 13616, 110…\n$ sentiment       &lt;chr&gt; \"neutral\", \"neutral\", \"neutral\", \"positive\", \"positive…\n$ gpt_Rating      &lt;dbl&gt; 4.0, 3.0, 3.0, 5.0, 5.0, 3.0, 4.0, 4.0, 4.0, 4.5\n$ reliability     &lt;int&gt; 1, 0, 1, 0, 1, 1, 1, 0, 1, 0\n$ utility         &lt;int&gt; 0, 1, 1, 0, 0, 1, 1, 1, 1, 0\n$ driving         &lt;int&gt; 1, 0, 1, 1, 1, 0, 1, 1, 1, 1\n$ comfort         &lt;int&gt; 0, 0, 0, 1, 0, 0, 0, 1, 1, 0\n$ interior        &lt;int&gt; 0, 0, 0, 1, 0, 0, 1, 1, 1, 0\n$ fuel_efficiency &lt;int&gt; 0, 1, 1, 0, 0, 0, 1, 0, 1, 0\n$ technology      &lt;int&gt; 0, 0, 0, 1, 0, 0, 1, 0, 0, 0\n\n# reliability\n# engine power / performance\n# build quality\n# smooth handling\n# reliability and durability\n# technology and/or connectivity\n# gas mileage / fuel efficiency\n# safety\n# cargo space\n# driver assistance\n# comfort features / car noise / ride quality\n\n# niche issues\n# electrical problems\n# transmission problems\n\n# other\n# resale value\n# brand loyalty?\n\n#edmunds categories: utility driving comfort interior technology"
  },
  {
    "objectID": "llm-assisted-text-analysis.html#accuracy-of-llm-assisted-coding",
    "href": "llm-assisted-text-analysis.html#accuracy-of-llm-assisted-coding",
    "title": "LLM-Assisted Analysis of Open-Ended Text",
    "section": "Accuracy of LLM-Assisted Coding",
    "text": "Accuracy of LLM-Assisted Coding\n\ndf$GPT_Rating &lt;- df$Rating + rnorm(length(df$Rating),0,1)\n\n# linear trend + confidence interval\np3 &lt;- ggplot(df, aes(x=Rating, y=GPT_Rating)) +\n  geom_point() +\n  geom_smooth(method=lm , color=\"red\", fill=\"#69b3a2\", se=TRUE) +\n  theme_ipsum()\n\np3\n\n\n\n\n\n\n\n# confusion matrix approach\n\n# Define the bin breaks and labels\nbin_breaks &lt;- c(-Inf, 2.5, 3.5, 5)\nbin_labels &lt;- c(\"Negative\", \"Neutral\", \"Positive\")\n\n# Use cut() to bin the Rating variable\ndf &lt;- df %&gt;%\n  mutate(Rating_cat = cut(Rating, breaks = bin_breaks, labels = bin_labels, include.lowest = TRUE))\n\n\n\n# Load necessary library\nlibrary(caret)\n\n# Example data: Actual and predicted classes\nactual &lt;- factor(c(\"Class1\", \"Class2\", \"Class3\", \"Class1\", \"Class2\", \"Class3\", \"Class1\", \"Class2\", \"Class3\"))\npredicted &lt;- factor(c(\"Class1\", \"Class2\", \"Class3\", \"Class1\", \"Class2\", \"Class2\", \"Class3\", \"Class3\", \"Class1\"))\n\n# Ensure both actual and predicted have the same levels (classes)\nlevels(actual) &lt;- levels(predicted) &lt;- c(\"Class1\", \"Class2\", \"Class3\")\n\n# Generate the confusion matrix\nconf_matrix &lt;- confusionMatrix(predicted, actual)\n\n# Print the confusion matrix\nprint(conf_matrix)\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction Class1 Class2 Class3\n    Class1      2      0      1\n    Class2      0      2      1\n    Class3      1      1      1\n\nOverall Statistics\n                                        \n               Accuracy : 0.5556        \n                 95% CI : (0.212, 0.863)\n    No Information Rate : 0.3333        \n    P-Value [Acc &gt; NIR] : 0.1448        \n                                        \n                  Kappa : 0.3333        \n                                        \n Mcnemar's Test P-Value : NA            \n\nStatistics by Class:\n\n                     Class: Class1 Class: Class2 Class: Class3\nSensitivity                 0.6667        0.6667        0.3333\nSpecificity                 0.8333        0.8333        0.6667\nPos Pred Value              0.6667        0.6667        0.3333\nNeg Pred Value              0.8333        0.8333        0.6667\nPrevalence                  0.3333        0.3333        0.3333\nDetection Rate              0.2222        0.2222        0.1111\nDetection Prevalence        0.3333        0.3333        0.3333\nBalanced Accuracy           0.7500        0.7500        0.5000\n\n# Load necessary library\nlibrary(ggplot2)\n\n# Convert confusion matrix to a data frame\nconf_matrix_df &lt;- as.data.frame(conf_matrix$table)\n\n# Plot the confusion matrix\nggplot(conf_matrix_df, aes(x = Reference, y = Prediction, fill = Freq)) +\n  geom_tile() +\n  geom_text(aes(label = Freq), color = \"white\") +\n  scale_fill_gradient(low = \"lightblue\", high = \"darkblue\") +\n  labs(title = \"Confusion Matrix\",\n       x = \"Actual\",\n       y = \"Predicted\") +\n  theme_minimal()"
  },
  {
    "objectID": "llm-assisted-text-analysis.html#disaggregation",
    "href": "llm-assisted-text-analysis.html#disaggregation",
    "title": "LLM-Assisted Analysis of Open-Ended Text",
    "section": "Disaggregation",
    "text": "Disaggregation\nresults by American, European, Japanesse, and South Korean automakers"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "llm-assisted-text-analysis",
    "section": "",
    "text": "In progress.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  }
]